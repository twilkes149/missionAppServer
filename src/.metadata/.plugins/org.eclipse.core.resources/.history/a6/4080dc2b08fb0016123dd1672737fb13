package database;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;

import serverModel.Event;

/**
 * The DAO for Events
 * @author Tucker
 *
 */
public class EventDAO extends DatabaseDriver{
	LocationDAO databaseLocation;
	public EventDAO(String name) {
		super(name);
		databaseLocation = new LocationDAO(DatabaseDriver.databaseName);
	}
	
	/**
	 * Returns an array of events that belong to a user
	 * @param userID the id of the user
	 * @return list of events
	 */
	public ArrayList<Event> getEventsOfUser(int userID) {
		Connection connection = null;
		ArrayList<Event> result = new ArrayList<Event>();
		try {
			connection = Setup.initialize(databaseName);
			Statement stat = connection.createStatement();
			ResultSet rs = stat.executeQuery("SELECT * from event WHERE userLink = '" + userID + "''");
			
			//loop for all of the results
			while (rs.next()) {
				Event curr = new Event();
				curr.setId(rs.getInt(1));
			}
			return result;
		}
		catch (Exception e) {
			return null;
		}
	}
	
	/**
	 * Returns an array of events that belong to a person
	 * @param personID the id of the person
	 * @return list of events
	 */
	public ArrayList<Event> getEventsOfPerson(int personID) {
		return null;
	}

	/** Gets information about an event from the database
	 * @param id the ID of the event
	 * @return returns the event if it exists, otherwise returns null
	 */
	public Event getEvent (int id) {
		Connection connection = null;
		Event result = new Event();
		try {
			connection = Setup.initialize(databaseName);
			Statement stat = connection.createStatement();
			ResultSet rs = stat.executeQuery("SELECT * from event WHERE id = '" + id + "';");
			
			result.setId(rs.getInt(1));
			//result.setOwner(rs.getString(2));
			//result.setDescendant(rs.getString(3));
			result.setType(rs.getString(4));
			result.setYear(rs.getInt(5));
			rs.close();
			
			result.setLocation(databaseLocation.getLocation(result.getId()));
			connection.close();
			return result;
		}
		catch (Exception e) {//failed getting event probably because it's not in the database
			System.err.println(e.getMessage());
			return null;
		}
	}
	
	/** adds an event to the database
	 * @param event the even to save to the database
	 * @return returns true if successful
	 */
	public boolean saveEvent(Event event) throws Exception{
		Connection connection = Setup.initialize(databaseName);
		PreparedStatement stat = connection.prepareStatement("insert into location values(?,?,?,?,?);");
		stat.setString(1, "" + event.getLocation().getLongitude());
		stat.setString(2, "" + event.getLocation().getLatitude());
		stat.setString(3, "" + event.getLocation().getCountry());
		stat.setString(4, "" + event.getLocation().getCity());
		stat.setString(5, "" + event.getId());
		//stat.setString(6, "" + event.getId());//link to the person this event belongs to
		stat.addBatch();
		
		connection.setAutoCommit(false);
		stat.executeBatch();
		connection.setAutoCommit(true);
		
		PreparedStatement stat1 = connection.prepareStatement("insert into event values(?,?,?,?,?);");
		stat1.setString(1, "" + event.getId());
		if (event.getOwner() != null)
			stat1.setString(2, "" + event.getOwner().getId());
		else
			stat1.setString(2, "");
		if (event.getDescendant() != null)
			stat1.setString(3, "" + event.getDescendant().getUserId());
		else
			stat1.setString(3, "");
		stat1.setString(4, event.getType());
		stat1.setString(5, "" + event.getYear());
		stat1.addBatch();
		
		connection.setAutoCommit(false);
		stat1.executeBatch();
		connection.setAutoCommit(true);
		connection.close();
		return true;
	}
	
	public static void main(String[] args) {
		EventDAO eventDriver = new EventDAO("familyHistory");
		try {
			eventDriver.clear();
			eventDriver.initilize();
			eventDriver.saveEvent(new Event("birth", null, null, "23.454", "90.88", "wichita", "USA", 1994));
			
			Event myEvent = eventDriver.getEvent(0);
			System.out.println(myEvent.toString());
		
		}
		catch (Exception e) {
			System.err.print("Error saving event: "+ e.getMessage());
		}
		
	}
}
