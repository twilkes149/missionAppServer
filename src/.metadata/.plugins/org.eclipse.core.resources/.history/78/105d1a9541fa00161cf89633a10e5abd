package database;
import serverModel.Person;
import serverModel.User;
import serverModel.Location;

import java.sql.Statement;
import java.util.ArrayList;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;

/* Notes: make id auto increment in database so no two IDs will be the same
*/

import serverModel.Event;
/**
 * A class that will perform all of the operations on the database<br>
 * @author Tucker
 *
 */

//TODO create table that keeps track of highest index for each table, so reruning the program wont create duplicate ids
public class DatabaseDriver {
	public static String databaseName;
	
	/**
	 * @param name The name of the database
	 */
	public DatabaseDriver(String name) {
		databaseName = name;
	}
	
	/**  adds a person to the database
	 * @param person the person to save to the database
	 * @return returns true if successful 
	 */
	public boolean savePerson(Person person) throws Exception{
		System.out.println("Saving person: " + person.getFirstName());
		Connection connection = Setup.initialize(databaseName);
		PreparedStatement stat = connection.prepareStatement("insert into person values (?,?,?,?,?,?,?,?);");
		stat.setString(1, "" + person.getId());
		stat.setString(2, person.getFirstName());
		stat.setString(3, person.getLastName());
		stat.setString(4, "" + person.getGender());
		if (person.getFather() != null)
			stat.setString(5, "" + person.getFather().getId());
		else
			stat.setString(5, "");
		if (person.getMother() != null)
			stat.setString(6, "" + person.getMother().getId());
		else
			stat.setString(6, "");
		if (person.getSpouse() != null)
			stat.setString(7, "" + person.getSpouse().getId());
		else
			stat.setString(7, "");
		if (person.getDescendant() != null)
			stat.setString(8, "" + person.getDescendant().getUserId());
		else
			stat.setString(8, "");
		stat.addBatch();
		
		connection.setAutoCommit(false);//prepares a transaction
        stat.executeBatch();//executes the command
        connection.setAutoCommit(true);//if execute batch failed, it doesn't die
		connection.close();
        //adding the user's events to the database
        for (int i = 0; i < person.eventSize(); i++)
        	if (this.getEvent(person.getEvent(i).getId() ) == null)//if the even hasn't already been saved in the database
        		this.saveEvent(person.getEvent(i));
        
        //if the father isn't in the database and there is a father -> add the father
        if (person.getFather() != null && this.getPerson(person.getFather().getId()) == null)
        	this.savePerson(person.getFather());
        if (person.getMother() != null && this.getPerson(person.getMother().getId()) == null)
        	this.savePerson(person.getMother());
        
        //if the person's spouse is not in the database -> add it
        if (person.getSpouse() != null && this.getPerson(person.getSpouse().getId()) == null)
        	this.savePerson(person.getSpouse());
		return true;
	}
	
	/** adds an event to the database
	 * @param event the even to save to the database
	 * @return returns true if successful
	 */
	public boolean saveEvent(Event event) throws Exception{
		Connection connection = Setup.initialize(databaseName);
		PreparedStatement stat = connection.prepareStatement("insert into location values(?,?,?,?,?,?);");
		stat.setString(1, "" + event.getLocation().getEventID());
		stat.setString(2, "" + event.getLocation().getLongitude());
		stat.setString(3, "" + event.getLocation().getLatitude());
		stat.setString(4, "" + event.getLocation().getCountry());
		stat.setString(5, "" + event.getLocation().getCity());
		stat.setString(6, "" + event.getId());//link to the person this event belongs to
		stat.addBatch();
		
		connection.setAutoCommit(false);
		stat.executeBatch();
		connection.setAutoCommit(true);
		
		PreparedStatement stat1 = connection.prepareStatement("insert into event values(?,?,?,?,?);");
		stat1.setString(1, "" + event.getId());
		if (event.getOwner() != null)
			stat1.setString(2, "" + event.getOwner().getId());
		else
			stat1.setString(2, "");
		if (event.getDescendant() != null)
			stat1.setString(3, "" + event.getDescendant().getUserId());
		else
			stat1.setString(3, "");
		stat1.setString(4, event.getType());
		stat1.setString(5, "" + event.getYear());
		stat1.addBatch();
		
		connection.setAutoCommit(false);
		stat1.executeBatch();
		connection.setAutoCommit(true);
		return true;
	}
	
	/** adds a user to the database
	 * @param user the user to save to the database
	 * @return returns true if successful
	 */
	public boolean saveUser(User user) throws Exception{
		//TODO create authToken for each user
		Connection connection = Setup.initialize(databaseName);
		PreparedStatement stat = connection.prepareStatement("insert into user values(?,?,?,?,?,?,?,?,?,?)");
		stat.setString(1, "" + user.getUserId());
		stat.setString(2, user.getUserName());
		stat.setString(3, user.getPassword());
		stat.setString(4, user.getEmail());
		stat.setString(5, user.getFirstName());
		stat.setString(6, user.getLastName());
		stat.setString(7, "" + user.getGender());
		
		if (user.getFather() != null)
			stat.setString(8, "" + user.getFather().getId());
		else
			stat.setString(8, "");
		if (user.getMother() != null)
			stat.setString(9, "" + user.getMother().getId());
		else
			stat.setString(9, "");	
		if (user.getSpouse() != null)
			stat.setString(10, "" + user.getSpouse().getId());
		else
			stat.setString(10, "");
		stat.addBatch();
		
		connection.setAutoCommit(false);
		stat.executeBatch();
		connection.setAutoCommit(true);
		
		//saving the authToken
		this.saveAuthToken(user.getAuthToken());
		return true;
	}
	
	/** gets information about a user from the database
	 * @param id the unique ID of the user
	 * @return returns the user if it exists, otherwise returns null
	 */
	public UserDAO getUser(int id) {
		Connection connection = null;
		UserDAO result = new UserDAO();
		
		try {
			connection = Setup.initialize(databaseName);
			Statement stat = connection.createStatement();
			//getting the user from the database
			ResultSet rs = stat.executeQuery("SELECT * from user WHERE id = '" + id + "';");

			//creating the user object to return
			result.setId(id);
			result.setUserName(rs.getString(2));
			result.setPassword(rs.getString(3));
			result.setEmail(rs.getString(4));
			result.setFirstName(rs.getString(5));
			result.setLastName(rs.getString(6));
			result.setGender(rs.getString(7).charAt(0));
			result.setFather(rs.getString(8));
			result.setMother(rs.getString(9));
			result.setSpouse(rs.getString(10));
			result.setAuthToken(this.getAuthToken(result.getId()));
		}
		catch (Exception e) {
			//TODO comment out these lines
			System.err.println("error getting a user");
			System.err.println(e.getMessage());
			return null;
		}
		
		return result;
	}
	
	/** gets information about a user from the database
	 * @param userName the userName of the user
	 * @return returns the user if it exists, otherwise returns null
	 */
	public UserDAO getUser(String userName) {
		Connection connection = null;
		UserDAO result = new UserDAO();
		
		try {
			connection = Setup.initialize(databaseName);
			Statement stat = connection.createStatement();
			//getting the user from the database
			ResultSet rs = stat.executeQuery("SELECT * from user WHERE username = '" + userName + "';");

			//creating the user object to return
			result.setId(rs.getInt(1));
			result.setUserName(rs.getString(2));
			result.setPassword(rs.getString(3));
			result.setEmail(rs.getString(4));
			result.setFirstName(rs.getString(5));
			result.setLastName(rs.getString(6));
			result.setGender(rs.getString(7).charAt(0));
			result.setFather(rs.getString(8));
			result.setMother(rs.getString(9));
			result.setSpouse(rs.getString(10));
			result.setAuthToken(this.getAuthToken(result.getId()));
			connection.close();
		}
		catch (Exception e) {
			//TODO comment out these lines
			System.err.println("error getting a user");
			System.err.println(e.getMessage());
			return null;
		}
		
		return result;
	}
	
	public boolean saveAuthToken(AuthTokenDAO token) throws Exception{
		Connection connection = null;
		connection = Setup.initialize(databaseName);
		PreparedStatement stat = connection.prepareStatement("insert into authToken values(?,?,?,?,?,?);");
		
		stat.setString(1, "" + token.getUerID());
		stat.setString(2, "" + token.getMin());
		stat.setString(3, "" + token.getHour());
		stat.setString(4, "" + token.getDay());
		stat.setString(5, "" + token.getMonth());
		stat.setString(6, "" + token.getYear());
		stat.addBatch();
		
		connection.setAutoCommit(false);
		stat.executeBatch();
		connection.setAutoCommit(true);
		return true;
	}
	
	public AuthTokenDAO getAuthToken(int userID) {
		Connection connection = null;
		AuthTokenDAO result = null;
		try {
			connection = Setup.initialize(databaseName);
			Statement stat = connection.createStatement();
			ResultSet rs = stat.executeQuery("SELECT * from authToken WHERE userLink = '" + userID + "';");
			
			int min = rs.getInt(2);
			int hour = rs.getInt(3);
			int day = rs.getInt(4);
			int month = rs.getInt(5);
			int year = rs.getInt(6);
			result = new AuthTokenDAO(userID, hour, min, day, month, year);
			return result;
		}
		catch (Exception e) {
			return null;
		}
	}
	
	/** Gets information about an event from the database
	 * @param id the ID of the event
	 * @return returns the event if it exists, otherwise returns null
	 */
	public EventDAO getEvent (int id) {
		Connection connection = null;
		EventDAO result = new EventDAO();
		try {
			connection = Setup.initialize(databaseName);
			Statement stat = connection.createStatement();
			
			ResultSet rs = stat.executeQuery("SELECT * from event WHERE id = '" + id + "';");
			
			result.setId(rs.getInt(1));
			result.setOwner(rs.getString(2));
			result.setDescendant(rs.getString(3));
			result.setType(rs.getString(4));
			rs.close();
			
			result.setLocation(this.getLocations(result.getId()));
			
			return result;
		}
		catch (Exception e) {//failed getting event probably because it's not in the database
			return null;
		}
	}
	
	/**
	 * Returns a list of all locations that belong to a specific person
	 * @param personID the id of the person
	 * @return a list of locations
	 */
	private LocationDAO getLocations(int eventID) {
		Connection connection;
		LocationDAO location = new LocationDAO();
		try {
			connection = Setup.initialize(databaseName);
			Statement stat = connection.createStatement();
			ResultSet rs = stat.executeQuery("SELECT * from location WHERE eventLink = '" + eventID + "';");
			
			location.setEventID(eventID);
			location.setLongitude(rs.getString(2));
			location.setLatitude(rs.getString(3));
			location.setCountry(rs.getString(4));
			location.setCity(rs.getString(5));
			location.setYear(rs.getString(6));
		}
		catch (Exception e) {
			return null;
		}
		return location;		
	}
	
	/** Gets information about a person from the database
	 * @param id the ID of the person
	 * @return returns the person if it exists, otherwise returns null
	 */
	public PersonDAO getPerson(int id) {
		Connection connection = null;
		//creating the personDAO to return
		PersonDAO result = new PersonDAO();
		try {
			connection = Setup.initialize(databaseName);
			Statement stat = connection.createStatement();
			
			//getting the person from the database
			ResultSet rs = stat.executeQuery("SELECT * From person WHERE id = '" + id + "';");
			
			//setting the data to query result
			result.setFirstName(rs.getString(2));
			result.setLastName(rs.getString(3));
			result.setGender(rs.getString(4).charAt(0));
			result.setFather(rs.getString(5));
			result.setMother(rs.getString(6));
			result.setSpouse(rs.getString(7));
			
			rs.close();
		}
		catch (Exception e) {
			return null;
		}
		return result;
	}
	
	/** Erases one table from the database
	 * @param name the name of the table
	 * @return returns true if successful
	 */
	public boolean eraseTable(String tableName) throws Exception{
		Connection connection;
		connection = Setup.initialize(databaseName);
		Statement stat = connection.createStatement();
		
		stat.executeUpdate("drop table if exists " + tableName + ";");
		return true;
	}
	
	/** Erases all tables from the database
	 * @return returns true if successful
	 */
	public boolean clear() throws Exception {
		//a list of all the tables
		String[] tableList = {"person", "user", "event", "location", "authToken"};
		//erasing all of the tables
		for (int i = 0; i < 5; i++)
			this.eraseTable(tableList[i]);
		return true;
	}
	
	//a test method
	public static void main(String[] args) {
		DatabaseDriver val = new DatabaseDriver("familyHistory");
		try {
			val.clear();
			Setup.createTables(Setup.initialize("familyHistory"));//create the tables
			
			
			Person mother = new Person("Christy", "Wilkes", 'f', null, null, null, null);
			Person papa = new Person("Doran", "Wilkes", 'm', null, null, null, null);
			Person father = new Person("Koray", "Wilkes", 'm', null, papa, mother, null);
			mother.setSpouse(father);
			Person me = new Person("Tucker", "Wilkes", 'm', mother, father, null, null);
			me.addEvent("birth", me, null, "12.34", "-98.76", "wichita", "USA", 1994);
			val.savePerson(me);
			System.out.println("getting tucker's birth");
			EventDAO result = val.getEvent(0);
			System.out.println("got it");
			System.out.println("Event: \n" + result.toString());
			//if (val.getPerson(2) != null)
				//System.out.println("person exists");
		}
		catch (Exception e) {
			System.err.print("error in main: ");
			System.err.println(e.getMessage());
		}
	}
}
